#!/usr/bin/env python3

import os
import sys
import glob
import re
import time
import importlib

current_path = os.path.dirname(os.path.abspath(__file__))
parent_path = os.path.abspath(os.path.join(
    current_path, '..', '..', 'backend-flask'))
sys.path.append(parent_path)
from lib.db import db

def get_last_successful_run():
    sql = """
        SELECT last_successful_run
        FROM public.schema_information
        LIMIT 1
    """
    return int(db.query_value(sql, {}, verbose=False))


def set_last_successful_run(value):
    sql = """
        UPDATE schema_information
        SET last_successful_run = %(last_successful_run)s
        WHERE id = 1
    """
    db.query_commit(sql, {'last_successful_run': value})
    return value


last_successful_run = get_last_successful_run()

migrations_path = os.path.abspath(os.path.join(
    current_path, '..', '..', 'backend-flask', 'db', 'migrations'))
sys.path.append(migrations_path)
migration_files = glob.glob(f"{migrations_path}/*")


last_migration_file = None
for migration_file in migration_files:
    if last_migration_file == None:
        filename = os.path.basename(migration_file)
        module_name = os.path.splitext(filename)[0]
        match = re.match(r'^\d+', filename)
        if match:
            file_time = int(match.group())
            print("==<><>")
            print(last_successful_run, file_time)
            print(last_successful_run > file_time)
            if last_successful_run > file_time:
                last_migration_file = module_name
                mod = importlib.import_module(module_name)
                print('=== rolling back: ', module_name)
                mod.migration.rollback()
                set_last_successful_run(file_time)
